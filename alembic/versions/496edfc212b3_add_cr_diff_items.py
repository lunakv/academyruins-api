"""add_cr_diff_items

Revision ID: 496edfc212b3
Revises: f81d76ccde31
Create Date: 2023-09-03 09:43:58.323371

"""
import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision = "496edfc212b3"
down_revision = "f81d76ccde31"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    diff_items_table = op.create_table(
        "cr_diff_items",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("diff_id", sa.Integer(), nullable=False),
        sa.Column("old_number", sa.Text(), nullable=True),
        sa.Column("old_text", sa.Text(), nullable=True),
        sa.Column("new_number", sa.Text(), nullable=True),
        sa.Column("new_text", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["diff_id"],
            ["cr_diffs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_cr_diff_items_diff_id"), "cr_diff_items", ["diff_id"], unique=False)
    op.create_index(op.f("ix_cr_diff_items_new_number"), "cr_diff_items", ["new_number"], unique=False)
    op.create_index(op.f("ix_cr_diff_items_old_number"), "cr_diff_items", ["old_number"], unique=False)
    # ### end Alembic commands ###

    # Create items based on the contents of 'changes' and 'moves' in cr_diffs
    diffs_table_query = sa.table("cr_diffs", sa.column("id"), sa.column("changes"), sa.column("moves")).select()
    diffs_table_results = op.get_bind().execute(diffs_table_query).fetchall()

    item_rows = []
    for diff_id, changes, moves in diffs_table_results:
        for change in changes:
            item = {
                "old_text": (change.get("old") or {}).get("ruleText"),
                "old_number": (change.get("old") or {}).get("ruleNum"),
                "new_text": (change.get("new") or {}).get("ruleText"),
                "new_number": (change.get("new") or {}).get("ruleNum"),
                "diff_id": diff_id,
            }
            item_rows.append(item)

        for move in moves:
            item = {
                "old_number": move[0],
                "old_text": None,
                "new_number": move[1],
                "new_text": None,
                "diff_id": diff_id,
            }
            item_rows.append(item)

    op.bulk_insert(diff_items_table, item_rows)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_cr_diff_items_old_number"), table_name="cr_diff_items")
    op.drop_index(op.f("ix_cr_diff_items_new_number"), table_name="cr_diff_items")
    op.drop_index(op.f("ix_cr_diff_items_diff_id"), table_name="cr_diff_items")
    op.drop_table("cr_diff_items")
    # ### end Alembic commands ###
